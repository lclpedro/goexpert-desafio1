package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"github.com/lclpedro/scaffold-golang-fiber/internal/application/services/orders"

	"github.com/lclpedro/scaffold-golang-fiber/graph/model"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.NewOrder) (*model.Order, error) {
	order, err := r.OrdersService.CreateOrder(ctx, orders.Input{
		Name:  input.Name,
		Price: input.Price,
	})
	if err != nil {
		return &model.Order{}, err
	}
	return &model.Order{
		ID:    order.ID,
		Name:  order.Name,
		Price: order.Price,
	}, nil
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {
	output, err := r.OrdersService.GetAllOrders(ctx)
	if err != nil {
		return []*model.Order{}, err
	}

	var orders []*model.Order
	for _, order := range output {
		orders = append(orders, &model.Order{
			ID:    order.ID,
			Name:  order.Name,
			Price: order.Price,
		})
	}
	return orders, nil
}

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, id string) (*model.Order, error) {
	output, err := r.OrdersService.GetOrder(ctx, id)
	if err != nil {
		return &model.Order{}, err
	}
	order := &model.Order{
		ID:    output.ID,
		Name:  output.Name,
		Price: output.Price,
	}
	return order, err
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
